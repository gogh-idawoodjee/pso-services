<?php

namespace App\Services;

use App\Classes\FSMPlace;
use App\Classes\FSMTask;
use App\Classes\FSMTimeCommit;
use Carbon\Carbon;
use Illuminate\Http\Client\Response;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Http;
use stdClass;


class IFSTaskService
{
    private string $fsm_token;

    private string $fsm_env;
    private string $fsm_url;
    private string $fsm_task_path;
    private string $fsm_tc_path;
    private string $task_id;
    private string $fsm_query_string;
    private Response $fsm_task;
    private Collection $task_data;
    private stdClass $activity_slot;
    private string $fsm_full_task_url;
    private string $fsm_full_tc_url;
    private FSMTask $fsmtask;


    public function __construct($token, $task_id, $slot = null, $task_data = null)
    {
        $this->fsm_token = $token;
        $this->task_id = $task_id;
        $this->activity_slot = $slot ? (object)$slot : new stdClass();
        $this->task_data = collect($task_data) ?: new Collection();
        $this->fsm_env = config('ifs.fsm.fsm_environment');
        $this->fsm_task_path = config('ifs.fsm.fsm_task_endpoint_path');
        $this->fsm_tc_path = config('ifs.fsm.fsm_tc_endpoint_path');
        $this->fsm_url = config('ifs.fsm.' . $this->fsm_env . '.base_url');
        $this->fsm_query_string = config('ifs.fsm.fsm_task_endpoint_query_string');
        $this->fsm_full_task_url = 'https://' . $this->fsm_url . $this->fsm_task_path . $this->task_id . $this->fsm_query_string;
        $this->fsm_full_tc_url = 'https://' . $this->fsm_url . $this->fsm_tc_path;

        $temptask = Http::withHeaders(['Authorization' => $this->fsm_token])->get($this->fsm_full_task_url);

//        $this->fsmtask = $this->createFSMTask($temptask->collect());


    }

    public static function create(...$params)
    {
        return new static(...$params);
    }

    public function getFSMTask()
    {
        $this->fsm_task = Http::withHeaders(['Authorization' => $this->fsm_token])->get($this->fsm_full_task_url);
        if ($this->taskHTTPStatus() == 200) {
            return $this->task_data = $this->fsm_task->collect();
        }
        return false;

    }

    public function createFSMTask($task_data)
    {
        $newtask = new FSMTask($task_data);
        $newtask->setCustomerPlace(new FSMPlace($task_data->place->name, $task_data->place->time_zone));
        $newtask->setTimeCommit(new FSMTimeCommit($task_data->time_commit->tc_id, $task_data->time_commit->status, $task_data->time_commit->start_dttm, $task_data->time_commit->commit_dttm));
        return $newtask;
    }

    private function timeCommitPayload($start, $end, $task_id)
    {
        return [
            'start_dttm' => $start,
            'commit_dttm' => $end,
            'commit_interval' => Carbon::create($start)->diffInMinutes(Carbon::create($end)),
            'commit_units' => 'minutes',
            'response_code' => 'PRIMARY',
            'response_type' => 'ARRIVAL',
            'calendar_id' => '24BY7',
            'status' => 'ACTIVE',
            'task_id' => $task_id,
            'user_def11' => 'Generated by ISHSM'

        ];
    }

    public function updateOrCreateTimeCommit()
    {

        $tc_payload = $this->timeCommitPayload($this->activity_slot->window_start_datetime, $this->activity_slot->window_end_datetime, $this->task_id);
        clock()->info($tc_payload);

        if ($this->taskHasTimeCommit()) {
            clock()->info("has time commit = true");
            Http::withHeaders(['Authorization' => $this->fsm_token])->patch($this->fsm_full_tc_url . $this->task_data['time_commit'][0]['tc_id'], $tc_payload);
        } else {
            clock()->info("has time commit = false");
            Http::withHeaders(['Authorization' => $this->fsm_token])->post($this->fsm_full_tc_url, $tc_payload);
        }

        return $this;

    }

    private function taskStatusPayload()
    {
        return [
            'task_status' => 'SCHEDULED'
        ];
    }

    public function updateTaskStatus()
    {
        $task_status_payload = $this->taskStatusPayload();
        Http::withHeaders(['Authorization' => $this->fsm_token])->patch('https://' . $this->fsm_url . $this->fsm_task_path . $this->task_id, $task_status_payload);
        return $this;
    }

    private function taskHasTimeCommit()
    {
        return $this->task_data['time_commit'] && count($this->task_data['time_commit']) > 0;
    }

    public function taskHTTPStatus()
    {
        // todo should rename this to task status instead of exists
        return $this->fsm_task->status();
    }

}
